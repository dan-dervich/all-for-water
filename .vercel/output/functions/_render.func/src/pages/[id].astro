---
import Layout from "@layouts/Layout.astro";
import { items } from "../lib/categories.js";
import CardPorProducto from "@components/ui/CardPorProducto.astro";
import { productos } from "@lib/products";
import pdfs_carta from "@lib/pdfs_carta";
import pdfs_tabla from "@lib/pdfs_tabla";
import { segmentos } from "@lib/segmentos";
import { descripciones_foto } from "@lib/descripcion_foto";
import LanguageSwitch from "@components/ui/LenguageSwitch";
import { items_es } from "@lib/categories_es";

export async function getStaticPaths() {
  return items.map((item) => ({
    params: { id: item.nombre },
  }));
}

const { id } = Astro.params;

const item = items.find((product) => product.nombre === id);

if (!item) {
  throw new Error(`Item with name ${id} not found`);
}

const filteredProductos = productos.filter((product) =>
  item.productos.includes(product.id)
);

const categoria_es_id = item.espanol;

let categoria_es_nombre = items_es.find(
  (categoria) => categoria.id === categoria_es_id
);

categoria_es_nombre = categoria_es_nombre ? categoria_es_nombre.nombre : "";

const filteredSegmentos = filteredProductos.flatMap((product) =>
  segmentos.filter((segmento) => product.segmentos.includes(segmento.id))
);

const filteredDescFoto = descripciones_foto.filter((desc) =>
  item.desc.includes(desc.id)
);

const uniqueSegment = [
  ...new Set(filteredSegmentos.map((segmento) => segmento)),
];

const descripcion = item.descripcion;

let editedDescFoto =
  filteredDescFoto.length > 0 ? filteredDescFoto[0].descripcion : "";

editedDescFoto = editedDescFoto.split("</div>");

editedDescFoto[0] = editedDescFoto[0].replace(
  "<div>",
  "<div class='flex flex-col justify-center text-center items-center'>"
);

if (editedDescFoto[1] == undefined) {
  editedDescFoto[1] = ``;
}
editedDescFoto[1] = `<div class="flex justify-start items-start flex-col w-full p-4 text-gray-800 font-medium leading-relaxed gap-5">${editedDescFoto[1]}</div>`;

if (/<table/.test(editedDescFoto[1])) {
  editedDescFoto[1] = editedDescFoto[1]
    .replace(
      "<thead>",
      '<thead class="bg-[#045b79] text-white font-normal border border-gray-300 border-t-1 border-l-1 border-r-1"'
    )
    .replace(
      "<table",
      '<table class="text-center justify-center items-center w-[1000px] h-[400px] font-normal"'
    )
    .replace(
      /<td/g,
      '<td class="border border-gray-300 border-t-1 border-l-1 border-r-1"'
    )
    .replace(/<\/thead>/, "</thead>");
}
editedDescFoto[1] = `<div class="flex justify-start items-start flex-col w-full p-4 text-gray-800 font-medium leading-relaxed gap-5">${editedDescFoto[1]}</div>`;
---

<LanguageSwitch
  client:only="react"
  url={`/es/${categoria_es_nombre}`}
  idioma={"EN"}
/>
<Layout title={item.nombre}>
  <section
    class="mt-[128px] bg-white flex flex-col items-center justify-center text-center sm:p-10"
  >
    <h1 class="text-light-blue font-semibold text-5xl px-5 text-center py-10">
      {
        (item.nombre_url || item.nombre).charAt(0).toUpperCase() +
          (item.nombre_url || item.nombre).slice(1)
      }
    </h1>
    <div
      class="sm:max-w-[1000px] max-w-full text-custom-grey font-light px-5 text-center text-sm sm:text-base flex flex-col justify-center items-center"
    >
      <div class="flex justify-center items-center md:flex-row flex-col gap-5">
        {
          filteredDescFoto[0] && (
            <img class="w-1/2 h-auto" src={filteredDescFoto[0].fotoUrl} />
          )
        }
        <div set:html={descripcion || editedDescFoto[0]} />
      </div>
    </div>
    <div class="flex flex-col justify-center items-center">
      <div set:html={editedDescFoto[1]} />
    </div>

    <div class="flex flex-wrap justify-center gap-5 m-5">
      {
        uniqueSegment.length > 0 &&
          uniqueSegment.map((segment) =>
            segment.marca ? (
              <a
                class="segment-button hover:scale-105 transition-all shadow-md"
                href={"#segmento-" + segment.nombre}
              >
                <img
                  src={segment.fotoUrl}
                  alt={segment.nombre}
                  class="w-auto h-24 object-cover rounded-md"
                />
              </a>
            ) : (
              <a
                class="bg-blue-500 text-white py-2 px-4 rounded segment-button hover:scale-105 transition-all flex items-center justify-center"
                href={`#${segment.id}`}
              >
                {segment.nombre}
              </a>
            )
          )
      }
    </div>

    <div class="w-full mt-10 mb-20">
      {
        uniqueSegment.length > 0 ? (
          uniqueSegment.map((segment) => {
            const productosPorSegmento = filteredProductos.filter((product) =>
              product.segmentos.includes(segment.id)
            );

            if (productosPorSegmento.length > 0) {
              return (
                <section id={segment.id} class="mb-10">
                  <h2
                    id={"segmento-" + segment.nombre}
                    class="text-light-blue font-semibold text-5xl px-5 text-center py-10"
                  >
                    {segment.nombre}
                  </h2>
                  <div
                    class={`${
                      productosPorSegmento.length === 1
                        ? "w-full"
                        : "grid gap-5 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 justify-center"
                    }`}
                  >
                    {productosPorSegmento.map((product) => {
                      const productPdfs_tabla = pdfs_tabla.filter((pdf) =>
                        product.pdfs_tabla.includes(pdf.id)
                      );
                      const productPdfs_carta = pdfs_carta.filter((pdf) =>
                        product.pdfs_carta.includes(pdf.id)
                      );

                      return (
                        <CardPorProducto
                          key={product.id}
                          id={`producto-${product.id}`}
                          imgSrc={product.fotoUrl || "vacio"}
                          text={product.nombre}
                          desc={product.descripcion}
                          pdfs_tabla={productPdfs_tabla}
                          pdfs_carta={productPdfs_carta}
                          className="w-64 h-64"
                        />
                      );
                    })}
                  </div>
                </section>
              );
            }

            return null;
          })
        ) : (
          <div
            class={`${
              filteredProductos.length > 1
                ? filteredProductos.length === 2
                  ? "grid grid-cols-2 gap-5 justify-center items-start w-full"
                  : filteredProductos.length < 3
                    ? "flex flex-col gap-5 justify-center items-center w-full"
                    : "grid grid-cols-1 xl:grid-cols-3 gap-5 justify-center items-start w-full"
                : "flex flex-col gap-5 justify-center items-center w-full"
            }`}
          >
            {filteredProductos.map((product) => {
              const productPdfs_tabla = pdfs_tabla.filter((pdf) =>
                product.pdfs_tabla.includes(pdf.id)
              );
              const productPdfs_carta = pdfs_carta.filter((pdf) =>
                product.pdfs_carta.includes(pdf.id)
              );

              return (
                <CardPorProducto
                  key={product.id}
                  id={`producto-${product.id}`}
                  imgSrc={product.fotoUrl || "vacio"}
                  text={product.nombre}
                  desc={product.descripcion}
                  pdfs_tabla={productPdfs_tabla}
                  pdfs_carta={productPdfs_carta}
                />
              );
            })}
          </div>
        )
      }
    </div>
  </section>

  <style>
    html {
      scroll-behavior: smooth;
    }
  </style>
</Layout>
